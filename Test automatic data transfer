<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>League Stats Dashboard</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body { font-family: sans-serif; background: #f9fafc; color: #222; }
    .chart-container { max-width: 900px; margin: 2rem auto; background: #fff; border-radius: 10px; box-shadow: 0 4px 15px rgba(0,0,0,0.05); padding: 20px; }
    table { margin: 2rem auto; border-collapse: collapse; width: 100%; max-width: 900px; background: #fff; box-shadow: 0 4px 15px rgba(0,0,0,0.05); border-radius: 10px; }
    th, td { padding: 10px; border-bottom: 1px solid #eee; text-align: center; }
    th { background: #e9eff5; }
    h2 { margin-top: 3rem; }
    textarea { width: 100%; max-width: 900px; height: 260px; margin: 2rem auto; display: block; font-size: 1rem; }
    button { margin: 1rem auto; display: block; font-size: 1rem; padding: 0.5rem 1.5rem; }
  </style>
</head>
<body>
  <h1>League Stats Dashboard</h1>
  <label for="rawData"><b>Edit points per player (comma-separated):</b></label>
  <textarea id="rawData">
Markus   63, 54
Erwin    48, 66
Phil     76, 85
Didi     50, 12
Eirik    46, 54
Steffo   53, 66
Basti    47, 82
Emil     61, 2
Kempka   36, 63
Espen    57, 23
Alex     55, 47
  </textarea>
  <button onclick="processStats()">Show Stats</button>

  <div id="visuals"></div>
  <script>
    const allPlayers = ["Markus","Erwin","Phil","Didi","Eirik","Steffo","Basti","Emil","Kempka","Espen","Alex"];

    const colors = [
      '#E41A1C','#377EB8','#4DAF4A','#984EA3','#FF7F00',
      '#A65628','#F781BF','#999999','#66C2A5','#FFD92F','#000000'
    ];

    function processStats() {
      const input = document.getElementById('rawData').value.trim();
      const lines = input.split('\n').filter(l => l.trim());
      const pointsByPlayer = {};
      let maxGames = 0;

      allPlayers.forEach(p => pointsByPlayer[p] = []);

      lines.forEach(line => {
        const [name, ...rest] = line.split(/[\s,]+/);
        const points = line.replace(name, '').split(/[, ]+/).filter(s => s).map(Number);
        if (allPlayers.includes(name)) {
          pointsByPlayer[name] = points;
          if (points.length > maxGames) maxGames = points.length;
        }
      });

      maxGames = Math.max(maxGames, ...Object.values(pointsByPlayer).map(arr => arr.length));
      const matchdays = Array.from({length:maxGames}, (_,i)=>i+1);

      const matches = matchdays.map(md => {
        const stats = {};
        allPlayers.forEach(p => {
          stats[p] = { points: pointsByPlayer[p][md-1] ?? 0 };
        });
        return { matchday: md, stats };
      });

      matches.forEach(m => {
        const ranking = allPlayers.map(p => ({name:p, points:m.stats[p].points}))
          .sort((a,b)=>b.points-a.points);
        ranking.forEach((r,i)=>m.stats[r.name].place=i+1);
      });

      const cumulativePoints = {};
      allPlayers.forEach(p=>{
        let sum=0;
        cumulativePoints[p] = matches.map(m => (sum+=m.stats[p].points));
      });

      const tabellenplatzentwicklung = {};
      const totals = {};
      allPlayers.forEach(p=>totals[p]=0);
      matchdays.forEach((md,idx)=>{
        allPlayers.forEach(p=>totals[p]+=matches[idx].stats[p].points);
        const sorted = allPlayers.map(p=>({name:p,pts:totals[p]})).sort((a,b)=>b.pts-a.pts);
        sorted.forEach((r,i)=>{
          if(!tabellenplatzentwicklung[r.name]) tabellenplatzentwicklung[r.name]=[];
          tabellenplatzentwicklung[r.name].push(i+1);
        });
      });

      const ewige = allPlayers.map(p=>{
        const spiele = pointsByPlayer[p].length;
        const punkte = pointsByPlayer[p].reduce((a,b)=>a+b,0);
        const avg = spiele ? (punkte/spiele).toFixed(2) : '-';
        const spieltagssiege = matches.filter(m=>m.stats[p].place===1).length;
        const spieltagsletzter = matches.filter(m=>m.stats[p].place===allPlayers.length).length;
        const tabellenerster = (tabellenplatzentwicklung[p]||[]).filter(pl=>pl===1).length;
        const tabellenletzter = (tabellenplatzentwicklung[p]||[]).filter(pl=>pl===allPlayers.length).length;
        return {name:p, spiele, punkte, avg, spieltagssiege, spieltagsletzter, tabellenerster, tabellenletzter};
      });

      const hinrunde={}, rueckrunde={};
      const half=Math.floor(maxGames/2);
      allPlayers.forEach(p=>{
        hinrunde[p]=pointsByPlayer[p].slice(0,half).reduce((a,b)=>a+b,0);
        rueckrunde[p]=pointsByPlayer[p].slice(half).reduce((a,b)=>a+b,0);
      });

      let visuals='';
      visuals+=`<h2>Cumulative Points (Fiebertabelle)</h2><div class="chart-container"><canvas id="fieberChart"></canvas></div>`;
      visuals+=`<h2>Points per Matchday</h2><div class="chart-container"><canvas id="punkteChart"></canvas></div>`;
      visuals+=`<h2>Tabellenplatzentwicklung</h2><div class="chart-container"><canvas id="tabellenChart"></canvas></div>`;

      visuals+=`<h2>Ewige Tabelle</h2><table><thead><tr>
        <th>Spieler</th><th>Spiele</th><th>Punkte</th><th>ø P.p.S</th>
        <th>Spieltagssiege</th><th>Spieltagsletzter</th><th>Tabellenerster</th><th>Tabellenletzter</th>
      </tr></thead><tbody>`;
      ewige.forEach(r=>{
        visuals+=`<tr><td>${r.name}</td><td>${r.spiele}</td><td>${r.punkte}</td><td>${r.avg}</td>
        <td>${r.spieltagssiege}</td><td>${r.spieltagsletzter}</td><td>${r.tabellenerster}</td><td>${r.tabellenletzter}</td></tr>`;
      });
      visuals+=`</tbody></table>`;

      visuals+=`<h2>Hin-/Rückrundentabelle</h2><table><thead><tr><th>Spieler</th><th>Hinrunde</th><th>Rückrunde</th><th>Diff</th></tr></thead><tbody>`;
      allPlayers.forEach(p=>{
        const diff=rueckrunde[p]-hinrunde[p];
        const diffClass=diff>0?'style="color:green"':diff<0?'style="color:red"':'';
        visuals+=`<tr><td>${p}</td><td>${hinrunde[p]}</td><td>${rueckrunde[p]}</td><td ${diffClass}>${diff>0? '+'+diff: diff}</td></tr>`;
      });
      visuals+=`</tbody></table>`;

      document.getElementById('visuals').innerHTML=visuals;

      setTimeout(()=>{
        new Chart(document.getElementById('fieberChart'),{
          type:'line',
          data:{labels:matchdays,datasets:allPlayers.map((p,i)=>({label:p,data:cumulativePoints[p],borderColor:colors[i],backgroundColor:colors[i],fill:false}))},
          options:{responsive:true,scales:{x:{title:{display:true,text:'Spieltag'}},y:{title:{display:true,text:'Punkte'},beginAtZero:true}}}
        });
        new Chart(document.getElementById('punkteChart'),{
          type:'line',
          data:{labels:matchdays,datasets:allPlayers.map((p,i)=>({label:p,data:pointsByPlayer[p],borderColor:colors[i],backgroundColor:colors[i],fill:false}))},
          options:{responsive:true,scales:{x:{title:{display:true,text:'Spieltag'}},y:{title:{display:true,text:'Punkte'},beginAtZero:true}}}
        });
        new Chart(document.getElementById('tabellenChart'),{
          type:'line',
          data:{labels:matchdays,datasets:allPlayers.map((p,i)=>({label:p,data:tabellenplatzentwicklung[p],borderColor:colors[i],backgroundColor:colors[i],fill:false}))},
          options:{responsive:true,scales:{x:{title:{display:true,text:'Spieltag'}},y:{title:{display:true,text:'Tabellenplatz'},reverse:true,ticks:{stepSize:1}}}}
        });
      },100);
    }
  </script>
</body>
</html>
